name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Verify pnpm installation
        run: |
          echo "PATH: $PATH"
          which pnpm
          pnpm --version
      
      - name: Install dependencies
        run: |
          # In CI, install only the main package (not example-app which needs workspace:*)
          # and resolve @syntrojs/logger from npm registry instead of workspace link
          if [ ! -d "../syntrojs-logger" ]; then
            # Remove workspace reference temporarily for CI
            sed -i.bak "s| - '../syntrojs-logger'||g" pnpm-workspace.yaml
            # Remove example-app from workspace temporarily (it needs syntrojs@workspace:*)
            sed -i.bak "s| - 'example-app'||g" pnpm-workspace.yaml
            # Install only current package without frozen-lockfile to resolve from npm
            pnpm install --no-frozen-lockfile --filter .
          else
            # Local development: use frozen-lockfile with full workspace
            pnpm install --frozen-lockfile
          fi
      
      - name: Run linter
        run: pnpm run lint

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: |
          # In CI, install only the main package (not example-app which needs workspace:*)
          # and resolve @syntrojs/logger from npm registry instead of workspace link
          if [ ! -d "../syntrojs-logger" ]; then
            # Remove workspace reference temporarily for CI
            sed -i.bak "s| - '../syntrojs-logger'||g" pnpm-workspace.yaml
            # Remove example-app from workspace temporarily (it needs syntrojs@workspace:*)
            sed -i.bak "s| - 'example-app'||g" pnpm-workspace.yaml
            # Install only current package without frozen-lockfile to resolve from npm
            pnpm install --no-frozen-lockfile --filter .
          else
            # Local development: use frozen-lockfile with full workspace
            pnpm install --frozen-lockfile
          fi
      
      - name: Run type check
        run: pnpm run typecheck

  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20, 22]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: |
          # In CI, install only the main package (not example-app which needs workspace:*)
          # and resolve @syntrojs/logger from npm registry instead of workspace link
          if [ ! -d "../syntrojs-logger" ]; then
            # Remove workspace reference temporarily for CI
            sed -i.bak "s| - '../syntrojs-logger'||g" pnpm-workspace.yaml
            # Remove example-app from workspace temporarily (it needs syntrojs@workspace:*)
            sed -i.bak "s| - 'example-app'||g" pnpm-workspace.yaml
            # Install only current package without frozen-lockfile to resolve from npm
            pnpm install --no-frozen-lockfile --filter .
          else
            # Local development: use frozen-lockfile with full workspace
            pnpm install --frozen-lockfile
          fi
      
      - name: Run tests
        run: pnpm test
      
      - name: Run tests with coverage
        if: matrix.node-version == 20
        run: pnpm run test:coverage
      
      - name: Upload coverage reports
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: |
          # In CI, install only the main package (not example-app which needs workspace:*)
          # and resolve @syntrojs/logger from npm registry instead of workspace link
          if [ ! -d "../syntrojs-logger" ]; then
            # Remove workspace reference temporarily for CI
            sed -i.bak "s| - '../syntrojs-logger'||g" pnpm-workspace.yaml
            # Remove example-app from workspace temporarily (it needs syntrojs@workspace:*)
            sed -i.bak "s| - 'example-app'||g" pnpm-workspace.yaml
            # Install only current package without frozen-lockfile to resolve from npm
            pnpm install --no-frozen-lockfile --filter .
          else
            # Local development: use frozen-lockfile with full workspace
            pnpm install --frozen-lockfile
          fi
      
      - name: Build package
        run: pnpm run build
      
      - name: Check build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found"
            exit 1
          fi
          
          if [ ! -f "dist/index.js" ]; then
            echo "Error: dist/index.js not found"
            exit 1
          fi
          
          echo "Build artifacts verified ✅"

  # Security audit disabled - CodeQL provides better security analysis
  # Uncomment below if you want to enable dependency vulnerability scanning
  # security:
  #   name: Security Audit
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #     
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: 8
  #     
  #     - name: Get pnpm store directory
  #       shell: bash
  #       run: |
  #         echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
  #     
  #     - name: Setup pnpm cache
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ env.STORE_PATH }}
  #         key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pnpm-store-
  #     
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile
  #     
  #     - name: Run security audit (critical only)
  #       run: |
  #         echo "Checking for critical vulnerabilities..."
  #         if pnpm audit --audit-level=critical; then
  #           echo "✅ No critical vulnerabilities found"
  #         else
  #           echo "❌ Critical vulnerabilities found - this will fail the build"
  #           exit 1
  #         fi
  #     
  #     - name: Report moderate vulnerabilities (non-blocking)
  #       run: |
  #         echo "Checking for moderate vulnerabilities (non-blocking)..."
  #         pnpm audit --audit-level=moderate || echo "⚠️ Moderate vulnerabilities found but not blocking build"
  #       continue-on-error: true

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, build]
    if: always()
    
    steps:
      - name: Check all jobs
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.typecheck.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Some checks failed"
            exit 1
          fi
          echo "✅ All checks passed"

